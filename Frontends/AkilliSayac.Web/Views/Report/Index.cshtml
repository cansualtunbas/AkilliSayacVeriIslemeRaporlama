@using AkilliSayac.Shared.Enums
@{
    ViewData["Title"] = "Index";
}
@model List<AkilliSayac.Web.Models.Counters.CounterViewModel>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@* <script src="<%=ResolveClientUrl('~/Scripts/exceljs.min.js')%>" type="text/javascript"></script> *@
<script src="~/js/exceljs.min.js"></script>
<script src="~/js/filesaver.js"></script>
<div class="row">
    <div class="col-md-12">

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Raporlar</h5>

                @* <a asp-controller="Report" asp-action="Create" class="btn btn-primary mb-3">Sayaç oluştur</a> *@
                @if (Model.Any())
                {
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Seri Numarası</th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <input type="hidden" id="id" name="Id" value="@item.Id" />
                                    <td>@item.SerialNumber</td>

                                    <td>


                                        <input type="button" id="myButton" onclick="CreateReport('@item.SerialNumber.ToString()')" class="btn btn-info" value="Rapor Oluştur" />

                                    </td>


                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">
                        Rapor bulunamadı.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>

    function CreateReport(serialNumber) {


        $.ajax({
            type: "POST",
            url: "/Report/CreateReport?serialNumber=" + serialNumber,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {

                if (data != null) {
                    if (data.reportStatus == 0) {
                        var title = "Rapor Hazırlanıyor..."
                        Swal.fire({
                            title: title,
                            showConfirmButton: false,
                            timer: 1500
                        }).then(function () {
                            DownloadedReport(data.id)
                        })
                    }

                }





            }
        })



    }


    function DownloadedReport(id) {
        $.ajax({
            type: "POST",
            url: "/Report/DownloadedReport?Id="+id,
            processData: true,
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                
                if (data != null) {
                    GetCounterList(data)
                 
                }


            }
        })
    }
    function GetCounterList(id) {


        $.ajax({
            type: "GET",
            url: "/Report/GetCounterList?Id=" + id,
            processData: true,
            contentType: "application/json; charset=utf-8",
            success: function (data) {

             
                if (data != null) {
                    var title = "Tamamlandı!"
                    Swal.fire({
                        title: title,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(function () {
                        ExportExcel(data)
                    })
                  
                }

            }
        })
    }
    function ExportExcel(data) {

        counterList = [];
        data.forEach((x) => {
            let year = new Intl.DateTimeFormat('tr', { year: 'numeric' }).format(new Date(x.measurementTime));
            let month = new Intl.DateTimeFormat('tr', { month: 'short' }).format(new Date(x.measurementTime));
            let day = new Intl.DateTimeFormat('tr', { day: '2-digit' }).format(new Date(x.measurementTime));
            var currentDate = day + "/" + month + "/" + year
            counterList.push({
                "Seri Numarası": x.serialNumber, "Ölçüm Zamanı": currentDate, "Son Endeks Bilgisi": x.latestIndex, "Voltaj Değeri": x.voltageValue, "Akım Değeri": x.currentValue
            })
        })
        data = counterList;
        var workbook = new ExcelJS.Workbook();

        workbook.created = new Date();
        workbook.modified = new Date();
        workbook.lastPrinted = new Date();

        var worksheet = workbook.addWorksheet("Sheet1");
        worksheet.views = [
            { state: 'frozen', xSplit: 0, ySplit: 1 }
        ];

        let columns = [];
        let rows = [];

        var keys = Object.keys(data[0]);
        $.each(keys, function (i, v) {

            columns.push({ header: v, key: v, width: 30 });


        });

        worksheet.columns = columns;
        Object.keys(data).forEach(function (key) {
            rows.push(data[key]);


        });
        rows.forEach(function (i) {
            worksheet.addRow(i).commit();
        })


        var buff = workbook.xlsx.writeBuffer().then(function (data) {
            var blob = new Blob([data], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
            saveAs(blob, counterList[0]['Seri Numarası'] + "_Report" + ".xlsx");
        });

    }

</script>

 